# ZSH Configuration
#   Petra E Bauman <petra.e.bauman@gmail.com>
#   https://codeberg.org/petraglyph/dotfiles

# Oh My ZSH
if [ ! -d $HOME/.oh-my-zsh ]; then
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" "" --keep-zshrc
fi
fpath=($fpath $HOME/.local/share/zsh/site-functions)
zstyle ':omz:update' mode auto
export ZSH="$HOME/.oh-my-zsh"
source $ZSH/oh-my-zsh.sh

# General settings
HYPHEN_INSENSITIVE="true"
COMPLETION_WAITING_DOTS="true"


# User configuration
unsetopt share_history
bindkey -r '^[[Z'
zstyle ':completion:*' list-colors
tabs -4

# Externals
if [ -f $HOME/.profile ]; then
	source $HOME/.profile
fi
if [ -f $HOME/.zsh_profile ]; then
	source $HOME/.zsh_profile
fi
if [ -f $HOME/.aliasrc ]; then
	source $HOME/.aliasrc
fi
if [ -f $HOME/.cargo/env ]; then
	source $HOME/.cargo/env
fi
if [ -f $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
	source $HOME/.nix-profile/etc/profile.d/nix.sh
fi

# Add user local directories to PATH
if ! [[ "$PATH" =~ "$HOME/.local/bin" ]]; then
	PATH="$HOME/.local/bin:$PATH"
fi
if ! [[ "$PATH" =~ "$HOME/.local/share/flatpak/exports/bin" ]]; then
	PATH="$HOME/.local/share/flatpak/exports/bin:$PATH"
fi
export PATH=$PATH
if [ -z "$PYTHONPATH" ] && [ ! -z "$(command -v python3)" ]; then
	export PYTHONPATH="$HOME/.local/lib/$(python3 -V | sed -E -e 's/\.[0-9]+$//' -e 's/^.* /python/')/site-packages"
fi


# Configure Prompt
autoload -U colors && colors
setopt PROMPT_SUBST
set-prompt() {
	# starter
	PS1='%{$fg_bold[yellow]%}['
	# ssh indicator
	if [ ! -z $SSH_CONNECTION ]; then
		PS1+='%{$reset_color%}%{$fg[green]%}ssh:'
	fi
	# toolbox/distrobox indicator
	if uname -s 2> /dev/null | grep -q "Linux" ; then
		if [[ $(cat /proc/$PID/mounts| grep -w / | cut -d" " -f 1) =~ "overlay" ]]; then
			PS1+='%{$reset_color%}%{$fg[magenta]%}box:'
		fi
	fi

	# user@hostname
	if [ "$(id -u)" -eq 0 ]; then
		PS1+='%{$fg_bold[red]%}%m'
	else
		PS1+='%{$fg_bold[yellow]%}%n@%m'
	fi
	# directory
	PS1+=" %{$fg_bold[white]%}%1~"
	# git
	if git rev-parse --is-inside-work-tree 2> /dev/null | grep -q 'true' ; then
		PS1+=" %{$fg_bold[blue]%}$(git rev-parse --abbrev-ref HEAD 2> /dev/null)%{$reset_color%}"
		if [ $(git status --short | wc -l) -gt 0 ]; then 
			PS1+="%{$fg[red]%}+$(git status --short | wc -l | awk '{$1=$1};1')%{$reset_color%}"
		fi
	fi
	case ${KEYMAP} in
		(vicmd)      VI_MODE="%{$fg[magenta]%}%%" ;;
		(main|viins) VI_MODE="$" ;;
		(*)          VI_MODE="$" ;;
	esac
	# ender
	PS1+="%{$fg_bold[yellow]%}]$VI_MODE %{$reset_color%}% "
	# partial command
	PS2="%{$fg[green]%}%_%{$reset_color%} %{$fg_bold[yellow]%}>%{$reset_color%} "
}
function zle-line-init zle-keymap-select {
    set-prompt
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select


ex () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)  tar xjf $1 ;;
			*.tar.gz)   tar xzf $1 ;;
			*.bz2)      bunzip2 $1 ;;
			*.rar)      unrar x $1 ;;
			*.gz)       gunzip $1 ;;
			*.tar)      tar xf $1 ;;
			*.tbz2)     tar xjf $1 ;;
			*.tgz)      tar xzf $1 ;;
			*.zip)
				files=$(zipinfo -1 $1)
				dir=""
				if [[ $(echo $files | head -1) =~ '/' ]]; then
					top=$(echo ${files} | head -1 | cut -d"/" -f 1)
					#echo $top
					all=$(echo $files | wc -l)
					dired=$(echo $files | grep $top | wc -l)
					#echo "$all $dired"
					if [[ $all != $dired ]]; then
						dir=${1:0: -4}
					fi
				else
					dir=${1:0: -4}
				fi
				#echo "dir: $dir" ;;
				unzip $1 -d "$dir" ;;
			*.Z)        uncompress $1 ;;
			*.7z)       7z x $1 ;;
			*) echo "'$1' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# Vim mode
bindkey -v
set KEYTIMEOUT=1
bindkey -M vicmd "^V" edit-command-line
bindkey -M vicmd "k" up-line-or-beginning-search
bindkey -M vicmd "j" down-line-or-beginning-search
